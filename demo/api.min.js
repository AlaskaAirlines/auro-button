function toggledTextExample() {
  const toggledTextElem = document.querySelector('#toggledTextElem');

  // The mouseover and mouseout events are to simulate toggling text for mouse users
  toggledTextElem.addEventListener('mouseover', () => {
    toggledTextElem.iconOnly = false;
  });

  toggledTextElem.addEventListener('mouseout', () => {
    toggledTextElem.iconOnly = true;
  });

  // The focusin and focusout events are to simulate toggling text for keyboard users
  toggledTextElem.addEventListener('focusin', () => {
    toggledTextElem.iconOnly = false;
  });

  toggledTextElem.addEventListener('focusout', () => {
    toggledTextElem.iconOnly = true;
  });
}

function roundedRightAlignExample() {
  const rightAlignElem = document.querySelector('#rightAlignElem');

  // The mouseover and mouseout events are to simulate toggling text for mouse users
  rightAlignElem.addEventListener('mouseover', () => {
    rightAlignElem.iconOnly = false;
  });

  rightAlignElem.addEventListener('mouseout', () => {
    rightAlignElem.iconOnly = true;
  });

  // The focusin and focusout events are to simulate toggling text for keyboard users
  rightAlignElem.addEventListener('focusin', () => {
    rightAlignElem.iconOnly = false;
  });

  rightAlignElem.addEventListener('focusout', () => {
    rightAlignElem.iconOnly = true;
  });
}

function initButtonApiExamples(initCount) {
  initCount = initCount || 0;

  try {
    toggledTextExample();
    roundedRightAlignExample();
  } catch {
    if (initCount <= 20) {
      // setTimeout handles issue where content is sometimes loaded after the functions get called
      setTimeout(() => {
        initButtonApiExamples(initCount + 1);
      }, 100);
    }
  }
}

