/**
 * @file style.scss
 * @description
 *   Main SCSS file for auro-button web component.
 *   - Imports design tokens, core styles, and utility mixins.
 *   - Defines button shape and size maps for consistent styling.
 *   - Provides mixins for shape, size, icon, and outline logic.
 *   - Applies styles for button states, variants, and accessibility.
 *   - Organizes code into clear sections for maintainability.
 *
 * @copyright Copyright (c) Alaska Air. All rights reserved.
 * @license   Apache-2.0, see LICENSE in the project root for license information.
 */

/* stylelint-disable
   scss/dollar-variable-colon-newline-after,
   at-rule-no-unknown,
   at-rule-empty-line-before,
   comment-empty-line-before,
   scss/dollar-variable-colon-space-after,
   scss/dollar-variable-empty-line-before,
   scss/dollar-variable-first-in-block,
   scss/dollar-variable-pattern,
   color-function-notation,
   scss/selector-nest-combinators,
   selector-class-pattern,
   selector-attribute-quotes,
   no-descending-specificity,
   max-nesting-depth,
   declaration-empty-line-before,
   property-no-vendor-prefix,
   selector-max-class,
   no-duplicate-selectors,
   selector-max-attribute,
   selector-max-pseudo-class,
   selector-not-notation,
   scss/map-keys-quotes,
   scss/no-global-function-names
   */

/**
 * ----------------------------------------
 * 1. Imports and Variables
 * ----------------------------------------
 * - Imports design tokens, core styles, and utility mixins.
 * - Defines global variables for spacing and outlines.
 */

// Import Auro Sass variables and design tokens
@use "sass:map";
@use "@aurodesignsystem/design-tokens/dist/legacy/auro-classic/SCSSVariables" as vac;
@use "@aurodesignsystem/design-tokens/dist/themes/alaska/SCSSVariables--alaska" as v;

// General WCSS imports
@use "@aurodesignsystem/webcorestylesheets/src/breakpoints" as bp;
@use "@aurodesignsystem/webcorestylesheets/src/core";
@use "@aurodesignsystem/webcorestylesheets/src/animation";
@use "@aurodesignsystem/webcorestylesheets/src/utilityMixins/insetUtility";
@use '@aurodesignsystem/webcorestylesheets/dist/bundled/type/classes.alaska.min.css';
@use "@aurodesignsystem/design-tokens/dist/legacy/auro-classic/SCSSVariableMap";
@use '@aurodesignsystem/webcorestylesheets/src/utilityClasses/displayProperties';

// Global variables
$auro-inset-spacing-options: lg;
$auro-inset-directions: '--squish';
$defaultFocusOutlineWidth: 4px;

/**
 * ----------------------------------------
 * 2. Button Shape and Size Maps
 * ----------------------------------------
 * - $button-shapes: Maps shape names to their type (oblong or symmetrical).
 * - $button-sizes: Maps size names to padding, icon size, and outline size.
 */

// Define the button shapes and their types
$button-shapes: (
  'rounded': oblong,
  'pill': oblong,
  'pill-left': oblong,
  'pill-right': oblong,
  'circle': symmetrical,
  'square': symmetrical
);

// Define the button sizes and their various properties
// Maps in this map are based on the shape and/or shape type from the button-shapes map
$button-sizes: (
  'xs': (
    padding: var(--ds-size-150, #{vac.$ds-size-150}),
    iconSize: (
      symmetrical: var(--ds-size-300, #{vac.$ds-size-300}),
      oblong: var(--ds-size-200, #{vac.$ds-size-200}),
    ),
    outlineSizeMap: (
      oblong: (
        primary: $defaultFocusOutlineWidth,
        secondary: $defaultFocusOutlineWidth,
        tertiary: $defaultFocusOutlineWidth,
        ghost: 1px
      ),
      symmetrical: (
        primary: 1px,
        secondary: 1px,
        tertiary: 2px,
        flat: 1px,
        ghost: 1px
      )
    ),
  ),
  'sm': (
    padding: var(--ds-size-200, #{vac.$ds-size-200}),
    iconSize: (
      symmetrical: (var(--ds-size-300, #{vac.$ds-size-300})),
      oblong: (var(--ds-size-300, #{vac.$ds-size-300}))
    ),
    outlineSizeMap: (
      oblong: (
        primary: $defaultFocusOutlineWidth,
        secondary: $defaultFocusOutlineWidth,
        tertiary: $defaultFocusOutlineWidth,
        ghost: 1px
      ),
      symmetrical: (
        primary: 2px,
        secondary: 3px,
        tertiary: 4px,
        flat: 1px,
        ghost: 1px
      )
    )
  ),
  'md': (
    padding: var(--ds-size-300, #{vac.$ds-size-300}),
    iconSize: (
      symmetrical: var(--ds-size-300, #{vac.$ds-size-300}),
      oblong: var(--ds-size-300, #{vac.$ds-size-300})
    ),
    outlineSizeMap: (
      oblong: (
        primary: $defaultFocusOutlineWidth,
        secondary: $defaultFocusOutlineWidth,
        tertiary: $defaultFocusOutlineWidth,
        ghost: 1px
      ),
      symmetrical: (
        primary: 3px,
        secondary: 3px,
        tertiary: 4px,
        flat: 1px,
        ghost: 1px
      )
    )
  ),
  'lg': (
    padding: var(--ds-size-400, #{vac.$ds-size-400}),
    iconSize: (
      symmetrical: calc(var(--ds-size-300, #{vac.$ds-size-300}) + var(--ds-size-50, #{vac.$ds-size-50})),
      oblong: var(--ds-size-300, #{vac.$ds-size-300})
    ),
    outlineSizeMap: (
      oblong: (
        primary: $defaultFocusOutlineWidth,
        secondary: $defaultFocusOutlineWidth,
        tertiary: $defaultFocusOutlineWidth,
        ghost: 1px
      ),
      symmetrical: (
        primary: 3.33px,
        secondary: 3px,
        tertiary: 4px,
        flat: 1px,
        ghost: 1px
      )
    )
  ),
  'xl': (
    padding: var(--ds-size-500, #{vac.$ds-size-500}),
    iconSize: (
      symmetrical: calc(var(--ds-size-400, #{vac.$ds-size-400}) + var(--ds-size-50, #{vac.$ds-size-50})),
      oblong: var(--ds-size-300, #{vac.$ds-size-300})
    ),
    outlineSizeMap: (
      oblong: (
        primary: $defaultFocusOutlineWidth,
        secondary: $defaultFocusOutlineWidth,
        tertiary: $defaultFocusOutlineWidth,
        ghost: 1px
      ),
      symmetrical: (
        primary: 4px,
        secondary: 3px,
        tertiary: 4px,
        flat: 1px,
        ghost: 1px
      )
    )
  )
);

/**
 * ----------------------------------------
 * 3. Shape and Size Mixins
 * ----------------------------------------
 * - Dynamically generates styles for each shape and size combination.
 * - Mixins: size-and-shape-styles, outline-styles, icon-styles.
 */

/**
 * @mixin size-and-shape-styles
 * @description
 *   Applies icon and outline styles for a given size and shape.
 */
@mixin size-and-shape-styles($size, $shape) {
  $shapeType: map.get($button-shapes, $shape);
  $sizeData: map.get($button-sizes, $size);
  $iconSizeMap: map.get($sizeData, iconSize);
  $iconSize: map.get($iconSizeMap, $shapeType);
  @include icon-styles($shape, $size, $iconSize);

  $outlineSizeMap: map.get($sizeData, outlineSizeMap);
  $outlineSizeShapeMap: map.get($outlineSizeMap, $shapeType);
  @include outline-styles($size, $outlineSizeShapeMap, $shape);
}

/**
 * @mixin outline-styles
 * @description
 *   Sets focus outline and pseudo-border for each variant.
 */
@mixin outline-styles($size, $outlineSize, $shape) {
  @each $variant, $outline-width in $outlineSize {
    :host([size='#{$size}'][shape='#{$shape}'][variant='#{$variant}']) {
      .auro-button {
        &:focus,
        &:focus-visible {
          $outline-width: if($variant == 'primary', ($outline-width + 1px), $outline-width);
          box-shadow: inset 0 0 0 $outline-width var(--ds-auro-button-border-inset-color);

          @if $variant == 'primary' {
            $insetAmount: 1px;

            &:after {
              content: '';
              position: absolute;
              border-radius: inherit;
              box-sizing: content-box;
              top: 0;
              left: 0;
              width: calc(100% - ($insetAmount * 2));
              height: calc(100% - ($insetAmount * 2));
              border: $insetAmount solid var(--ds-auro-button-border-color);
            }
          }
        }
      }
    }
  }
}

/**
 * @mixin icon-styles
 * @description
 *   Sets icon size for a given shape and size.
 */
@mixin icon-styles($shape, $size, $iconSize) {
  :host([size='#{$size}'][shape=#{$shape}]) {
    ::slotted(auro-icon),
    ::slotted([auro-icon]) {
      --ds-auro-icon-size: #{$iconSize};
    }
  }
}

// SHAPE AND SIZE LOOP
@each $size, $size-value in $button-sizes {
  @each $shape, $shape-value in $button-shapes {
    @include size-and-shape-styles($size, $shape);
  }
}

/**
 * ----------------------------------------
 * 4. Size-based Styles
 * ----------------------------------------
 * - Apply styles that are based only on size.
 * - Mixins: inset-styles
 */

/**
 * @mixin inset-styles
 * @description
 *   Sets margin for .contentWrapper with a parented .inset based on size.
 *   Margin is based on the padding sizes in the $button-sizes map.
 */
@mixin inset-styles($size, $margin) {
  :host([size='#{$size}']) {
    .inset {
      .contentWrapper {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        margin-inline: $margin;
      }
    }
  }
}

// SIZE LOOP
@each $size, $size-value in $button-sizes {
  @include inset-styles($size, map.get($size-value, padding));
}

/**
 * ----------------------------------------
 * 5. Shape-specific Styles
 * ----------------------------------------
 * - Applies styles only for specific shapes.
 * - Mixins: symmetrical-styles
 */

/**
 * @mixin symmetrical-styles
 * @description
 *   Hides non-icon content for symmetrical shapes (e.g., circle, square).
 */
@mixin symmetrical-styles($shape) {
  :host([shape='#{$shape}']) {
    ::slotted(:not(auro-icon):not([auro-icon])) {
      position: absolute;
      overflow: hidden;
      clip: rect(1px, 1px, 1px, 1px);
      width: 1px;
      height: 1px;
      padding: 0;
      border: 0;
    }
  }
}

// SHAPE LOOP
@each $shape, $shapeValue in $button-shapes {
  $shapeType: map.get($button-shapes, $shape);
  @if $shapeType == 'symmetrical' {
    @include symmetrical-styles($shape);
  }
}

/**
 * ----------------------------------------
 * 6. Utility and State Styles
 * ----------------------------------------
 * - Handles flat variant, icon alignment, slot pointer events, and button states.
 */

:host([variant='flat']) {
  display: inline-block;
}

// adjust alignment for slotted SVG icon
::slotted(svg) {
  vertical-align: middle;
}

// Align text and icon horizontally inside text slot
.textSlot {
  display: inline-flex;
  align-items: center;
  gap: var(--ds-size-100, #{vac.$ds-size-100});

  // Ensure typography utility classes on text don't affect slotted icons
  ::slotted(auro-icon),
  ::slotted([auro-icon]),
  ::slotted(svg) {
    letter-spacing: normal;
    text-transform: none;
    line-height: 1;
    vertical-align: middle;
  }
}

// Prevent inherited font-size from affecting icon layout
.contentWrapper {
  font-size: 0; // Text sizing is applied by .textSlot (type class)
}

// Prevent typography classes (heading-*, body-*) from affecting icons assigned to the default slot
::slotted(auro-icon),
::slotted([auro-icon]),
::slotted(svg) {
  font-size: 0;
  line-height: 1;
  letter-spacing: normal;
  text-transform: none;
}

// Note: without this, events on a disabled element will still fire
slot {
  pointer-events: none;
}

/**
 * ----------------------------------------
 * 7. Core Button Styles
 * ----------------------------------------
 * - Styles for .auro-button, including states, variants, and accessibility.
 */
 :host {
  display: inline-block;
  overflow: hidden;
 }

.auro-button {
  position: relative;
  cursor: pointer;
  padding: 0 var(--ds-size-300, vac.$ds-size-300);
  padding-inline: unset;
  padding-block: unset;
  box-sizing: content-box;
  overflow: hidden;
  text-overflow: ellipsis;
  user-select: none;
  white-space: nowrap;
  outline: none;

  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: var(--ds-size-100, vac.$ds-size-100);

  // removes margins around button in Safari
  margin: 0;

  // macOS / iOS agents
  -webkit-touch-callout: none;
  -webkit-user-select: none;

  transition: padding 300ms ease-out;

  &:focus,
  &:focus-visible {
    outline: none;
  }

  // handle active state
  &:active {
    transform: scale(0.95);
  }

  &.loading {
    cursor: not-allowed;

    *:not([auro-loader]) {
      visibility: hidden;
    }
  }

  @include bp.auro_grid-breakpoint--sm {
    width: auto;
  }

  &:disabled {
    cursor: not-allowed;
    transform: unset;
  }
}

:host([fluid]) {
  display: block;

  $defaultBorderSize: 2px;
  $thinBorderSize: 1px;

  .auro-button {
    &:not(.thin):not(.simple) {
      width: calc(100% - 2 * #{$defaultBorderSize});
    }

    &.thin {
      width: calc(100% - 2 * #{$thinBorderSize});
    }

    &.simple {
      width: 100%;
    }
  }
}

