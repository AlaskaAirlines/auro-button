// Copyright (c) Alaska Air. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.

// ---------------------------------------------------------------------

/* stylelint-disable
   at-rule-no-unknown,
   comment-empty-line-before,
   scss/dollar-variable-colon-space-after,
   scss/dollar-variable-empty-line-before,
   scss/dollar-variable-first-in-block,
   scss/dollar-variable-pattern,
   color-function-notation,
   scss/selector-nest-combinators,
   selector-class-pattern,
   selector-attribute-quotes,
   no-descending-specificity,
   max-nesting-depth,
   declaration-empty-line-before,
   property-no-vendor-prefix,
   selector-max-class,
   no-duplicate-selectors,
   selector-max-attribute,
   selector-max-pseudo-class,
   selector-not-notation
   */

// Import Auro Sass variables
@use "@aurodesignsystem/design-tokens/dist/legacy/auro-classic/SCSSVariables" as vac;
@use "@aurodesignsystem/design-tokens/dist/themes/alaska/SCSSVariables--alaska" as v;

// general WCSS imports
@use "@aurodesignsystem/webcorestylesheets/src/breakpoints" as bp;
@use "@aurodesignsystem/webcorestylesheets/src/core";
@use "@aurodesignsystem/webcorestylesheets/src/animation";

@use "@aurodesignsystem/design-tokens/dist/legacy/auro-classic/SCSSVariableMap";

$auro-inset-spacing-options: lg;
$auro-inset-directions: '--squish';

@use "@aurodesignsystem/webcorestylesheets/src/utilityMixins/insetUtility";
@use '@aurodesignsystem/webcorestylesheets/dist/bundled/type/classes.alaska.min.css';

@mixin size-styles($size, $iconSize, $padding) {
  :host([size='#{$size}']) {
    .inset {
      padding-inline: $padding;
    }

    ::slotted(auro-icon),
    ::slotted([auro-icon]) {
      --ds-auro-icon-size: #{$iconSize};
    }
  }

  :host([fluid]),
  :host([fluid=true]) {
    .inset {
      width: calc(100% - (#{$padding} * 2));
    }
  }
}

$iconSizeXs: var(--ds-size-300, #{vac.$ds-size-300});
$paddingSizeXs: var(--ds-size-150, #{vac.$ds-size-150});

$iconSizeSm: var(--ds-size-300, #{vac.$ds-size-300});
$paddingSizeSm: var(--ds-size-200, #{vac.$ds-size-200});

$iconSizeMd: var(--ds-size-300, #{vac.$ds-size-300});
$paddingSizeMd: var(--ds-size-300, #{vac.$ds-size-300});

$iconSizeLg: calc(var(--ds-size-250, #{vac.$ds-size-250}) + var(--ds-size-100, #{vac.$ds-size-100}));
$paddingSizeLg: var(--ds-size-400, #{vac.$ds-size-400});

$iconSizeXl: calc(var(--ds-size-250, #{vac.$ds-size-250}) + var(--ds-size-200, #{vac.$ds-size-200}));
$paddingSizeXl: var(--ds-size-500, #{vac.$ds-size-500});

@include size-styles('xs', $iconSizeXs, $paddingSizeXs);
@include size-styles('sm', $iconSizeSm, $paddingSizeSm);
@include size-styles('md', $iconSizeMd, $paddingSizeMd);
@include size-styles('lg', $iconSizeLg, $paddingSizeLg);
@include size-styles('xl', $iconSizeXl, $paddingSizeXl);

:host([variant='flat']) {
  display: inline-block;
}

// adjust alignment for slotted SVG icon
::slotted(svg) {
  vertical-align: middle;
}

// Note: without this, events on a disabled element will still fire
slot {
  pointer-events: none;
}

// Button styles
.auro-button {
  position: relative;
  cursor: pointer;
  padding: 0 var(--ds-size-300, vac.$ds-size-300);
  padding-inline: unset;
  padding-block: unset;
  box-sizing: content-box;
  overflow: hidden;
  text-overflow: ellipsis;
  user-select: none;
  white-space: nowrap;

  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: var(--ds-size-100, vac.$ds-size-100);

  // removes margins around button in Safari
  margin: 0;

  // macOS / iOS agents
  -webkit-touch-callout: none;
  -webkit-user-select: none;

  transition: padding 300ms ease-out;

  // handle active state
  &:active {
    transform: scale(0.95);
  }

  &:focus-visible, &:focus {
    outline: none;

    outline-style: solid;
    outline-width: var(--ds-size-50, vac.$ds-size-50);
    outline-offset: calc(var(--ds-size-50, vac.$ds-size-50) * -1);

    &:not([variant='secondary']):not([variant='tertiary']) {
      outline-width: calc(var(--ds-size-50, vac.$ds-size-50) - 1px);
    }
  }

  &.loading {
    cursor: not-allowed;

    *:not([auro-loader]) {
      visibility: hidden;
    }
  }

  @include bp.auro_grid-breakpoint--sm {
    // min-width: 8.75rem;
    width: auto;
  }

  &:disabled {
    cursor: not-allowed;
    transform: unset;
  }

  &[variant='secondary'] {
    &:disabled {
      cursor: not-allowed;
      transform: unset;
    }
  }

  &[variant='tertiary'] {
    &:disabled {
      cursor: not-allowed;
      transform: unset;
    }
  }

  &[variant='ghost'] {
    &:disabled {
      cursor: not-allowed;
      transform: unset;
    }
  }

  &[onDark] {
    &:disabled {
      cursor: not-allowed;
      transform: unset;
    }

    &[variant='secondary'] {
      &:disabled {
        cursor: not-allowed;
        transform: unset;
      }
    }

    &[variant='tertiary'] {
      @media (hover: hover) {
        &:active,
        &:hover {
          box-shadow: none;
        }
      }

      &:active {
        box-shadow: none;
      }

      &:disabled {
        cursor: not-allowed;
        transform: unset;
      }
    }
  }

  &:not(.inset){
    overflow: unset;

    ::slotted(:not(auro-icon):not([auro-icon])) {
      display: none;
    }
  }

  // auro-button--slim
  &--slim {
    min-width: unset;
    min-height: calc(var(--ds-size-500, vac.$ds-size-500) - var(--ds-size-50, vac.$ds-size-50));
    max-height: calc(var(--ds-size-500, vac.$ds-size-500) - var(--ds-size-50, vac.$ds-size-50));
  }

  // auro-button--iconOnly
  &--iconOnly {
    ::slotted(auro-icon),
    ::slotted([auro-icon]) {
      --ds-auro-icon-size: var(--ds-size-300, #{vac.$ds-size-300});
    }

    padding: 0 var(--ds-size-100, vac.$ds-size-100);

    border-radius: 100px;
    min-width: unset;

    height: var(--ds-size-600, vac.$ds-size-600);
    width: var(--ds-size-500, vac.$ds-size-500);

    &:not(.auro-button--rounded):focus-visible,
    &:not(.auro-button--rounded):focus {
      &:not([variant='secondary']):not([variant='tertiary']):not([variant='flat']) {
        outline-width: 1px;
        outline-offset: -2px; // -(1px width + 1px border-width)
      }
    }
  }

  // auro-button--iconOnlySlim
  &--iconOnlySlim {
    ::slotted(auro-icon),
    ::slotted([auro-icon]) {
      --ds-auro-icon-size: calc(var(--ds-size-200, #{vac.$ds-size-200}) + var(--ds-size-50, #{vac.$ds-size-50}));
    }

    padding: 0 var(--ds-size-50, vac.$ds-size-50);

    height: calc(var(--ds-size-400, vac.$ds-size-400) + var(--ds-size-50, vac.$ds-size-50));
    width: calc(var(--ds-size-300, vac.$ds-size-300) + var(--ds-size-50, vac.$ds-size-50));
  }

  // auro-button--rounded
  &--rounded {
    border-radius: 100px;
    box-shadow: var(--ds-elevation-300, vac.$ds-elevation-300);

    height: var(--ds-size-500, vac.$ds-size-500);
    min-width: unset;

    transition: padding 300ms ease-out, outline 0ms, outline-offset 0ms;

    ::slotted(auro-icon),
    ::slotted([auro-icon]) {
      --ds-auro-icon-size: var(--ds-size-300, #{vac.$ds-size-300});
    }

    &:focus-visible, &:focus {
      &:not([variant='flat']) {
        &:after {
          border-radius: 100px;
        }
      }
    }
  }
}

// Handle outline specifically for XS sizes of button
// Ensures that there's enough content room in XS sized buttons.
:host([size=xs]) {
  .wrapper {
    &:focus-visible, &:focus {
      outline-width: 1px;
      outline-offset: -2px;
    }
  }
}

:host([rounded]) {
  .textSlot {
    transition: opacity 300ms ease-in;
    opacity: 1;
  }
}

:host([rounded][iconOnly]) {
  .textSlot {
    opacity: 0;
  }

  .textWrapper {
    display: none;
  }

  .auro-button {
    min-width: unset;
    padding: unset;

    width: var(--ds-size-600, vac.$ds-size-600);
  }
}

[auro-loader] {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  pointer-events: none;
}
