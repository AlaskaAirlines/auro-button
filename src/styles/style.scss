// Copyright (c) Alaska Air. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.

// ---------------------------------------------------------------------

/* stylelint-disable
   scss/dollar-variable-colon-newline-after,
   at-rule-no-unknown,
   at-rule-empty-line-before,
   comment-empty-line-before,
   scss/dollar-variable-colon-space-after,
   scss/dollar-variable-empty-line-before,
   scss/dollar-variable-first-in-block,
   scss/dollar-variable-pattern,
   color-function-notation,
   scss/selector-nest-combinators,
   selector-class-pattern,
   selector-attribute-quotes,
   no-descending-specificity,
   max-nesting-depth,
   declaration-empty-line-before,
   property-no-vendor-prefix,
   selector-max-class,
   no-duplicate-selectors,
   selector-max-attribute,
   selector-max-pseudo-class,
   selector-not-notation,
   scss/map-keys-quotes,
   scss/no-global-function-names
   */

// Import Auro Sass variables
@use "sass:map";
@use "@aurodesignsystem/design-tokens/dist/legacy/auro-classic/SCSSVariables" as vac;
@use "@aurodesignsystem/design-tokens/dist/themes/alaska/SCSSVariables--alaska" as v;

// general WCSS imports
@use "@aurodesignsystem/webcorestylesheets/src/breakpoints" as bp;
@use "@aurodesignsystem/webcorestylesheets/src/core";
@use "@aurodesignsystem/webcorestylesheets/src/animation";

@use "@aurodesignsystem/webcorestylesheets/src/utilityMixins/insetUtility";
@use '@aurodesignsystem/webcorestylesheets/dist/bundled/type/classes.alaska.min.css';

@use "@aurodesignsystem/design-tokens/dist/legacy/auro-classic/SCSSVariableMap";

$auro-inset-spacing-options: lg;
$auro-inset-directions: '--squish';
$defaultFocusOutlineWidth: 4px;

$button-shapes: (
  'rounded': oblong,
  'pill': oblong,
  'pill-left': oblong,
  'pill-right': oblong,
  'circle': symmetrical,
  'square': symmetrical
);

$button-sizes: (
  'xs': (
    padding: var(--ds-size-150, #{vac.$ds-size-150}),
    iconSize: var(--ds-size-300, #{vac.$ds-size-300}),
    outlineSizeMap: (
      oblong: (
        primary: $defaultFocusOutlineWidth,
        secondary: $defaultFocusOutlineWidth,
        tertiary: $defaultFocusOutlineWidth,
        ghost: 1px
      ),
      symmetrical: (
        primary: 1px,
        secondary: 1px,
        tertiary: 2px,
        flat: 1px,
        ghost: 1px
      )
    ),
  ),
  'sm': (
    padding: var(--ds-size-200, #{vac.$ds-size-200}),
    iconSize: var(--ds-size-300, #{vac.$ds-size-300}),
    outlineSizeMap: (
      oblong: (
        primary: $defaultFocusOutlineWidth,
        secondary: $defaultFocusOutlineWidth,
        tertiary: $defaultFocusOutlineWidth,
        ghost: 1px
      ),
      symmetrical: (
        primary: 2px,
        secondary: 3px,
        tertiary: 4px,
        flat: 1px,
        ghost: 1px
      )
    )
  ),
  'md': (
    padding: var(--ds-size-300, #{vac.$ds-size-300}),
    iconSize: var(--ds-size-300, #{vac.$ds-size-300}),
    outlineSizeMap: (
      oblong: (
        primary: $defaultFocusOutlineWidth,
        secondary: $defaultFocusOutlineWidth,
        tertiary: $defaultFocusOutlineWidth,
        ghost: 1px
      ),
      symmetrical: (
        primary: 3px,
        secondary: 3px,
        tertiary: 4px,
        flat: 1px,
        ghost: 1px
      )
    )
  ),
  'lg': (
    padding: var(--ds-size-400, #{vac.$ds-size-400}),
    iconSize: calc(var(--ds-size-300, #{vac.$ds-size-300}) + var(--ds-size-50, #{vac.$ds-size-50})),
    outlineSizeMap: (
      oblong: (
        primary: $defaultFocusOutlineWidth,
        secondary: $defaultFocusOutlineWidth,
        tertiary: $defaultFocusOutlineWidth,
        ghost: 1px
      ),
      symmetrical: (
        primary: 3.33px,
        secondary: 3px,
        tertiary: 4px,
        flat: 1px,
        ghost: 1px
      )
    )
  ),
  'xl': (
    padding: var(--ds-size-500, #{vac.$ds-size-500}),
    iconSize: calc(var(--ds-size-400, #{vac.$ds-size-400}) + var(--ds-size-50, #{vac.$ds-size-50})),
    outlineSizeMap: (
      oblong: (
        primary: $defaultFocusOutlineWidth,
        secondary: $defaultFocusOutlineWidth,
        tertiary: $defaultFocusOutlineWidth,
        ghost: 1px
      ),
      symmetrical: (
        primary: 4px,
        secondary: 3px,
        tertiary: 4px,
        flat: 1px,
        ghost: 1px
      )
    )
  )
);

@mixin size-based-styles($size, $shape) {
  // Get the data from the sizes map for this specific size
  $sizeData: map.get($button-sizes, $size);

  // Get the padding from the size data
  $padding: map.get($sizeData, padding);

  // Apply the inset styles based on the size and padding
  @include inset-styles($size, $padding);

  // Get the icon size from the size data
  $iconSize: map.get($sizeData, iconSize);

  @include icon-styles($size, $iconSize);

  // Get the outline size map from the size data
  $outlineSizeMap: map.get($sizeData, outlineSizeMap);

  // Get the outline size map for all shapes at this size from the map
  $outlineSizeShapeMap: map.get($outlineSizeMap, map.get($button-shapes, $shape));

  // Apply the outline styles based on the size, shape, and outline size map  
  @include outline-styles($size, $outlineSizeShapeMap, $shape);
}

@mixin outline-styles($size, $outlineSize, $shape) {
  @each $variant, $outline-width in $outlineSize {
    :host([size='#{$size}'][shape='#{$shape}'][variant='#{$variant}']) {
      .auro-button {
        &:focus,
        &:focus-visible {
          // We need to adjust the outline width based on the variant and size
          $outline-width: 
            if($variant == 'primary', 
              ($outline-width + 1px), 
              $outline-width  
            );

          // Set box shadow for focus outline
          box-shadow: inset 0 0 0 $outline-width var( --ds-auro-button-border-inset-color );

          // Use a pseudo-element to add a border to make the primary variant look inset
          @if $variant == 'primary' {
            $insetAmount: 1px;

            &:after {
              content: '';
              position: absolute;
              border-radius: inherit;
              box-sizing: content-box;
              top: 0;
              left: 0;
              width: calc(100% - ($insetAmount * 2));
              height: calc(100% - ($insetAmount * 2));
              border: $insetAmount solid var( --ds-auro-button-border-color );
            }
          }
        }
      }
    }
  }
}

@mixin icon-styles($size, $iconSize) {
   :host([size='#{$size}']) {
    ::slotted(auro-icon),
    ::slotted([auro-icon]) {
      --ds-auro-icon-size: #{$iconSize};
    }
  }
}

// Style mixin for setting inset styles based on size
@mixin inset-styles($size, $padding) {
  :host([size='#{$size}']) {
    .inset {
      padding-inline: $padding;
    }
  }

  :host([fluid]),
  :host([fluid=true]) {
    .inset {
      width: calc(100% - (#{$padding} * 2));
    }
  }
}

// Loop through the map to generate styles for each size
@each $size, $size-value in $button-sizes {
  @each $shape, $shape-value in $button-shapes {
    @include size-based-styles($size, $shape);
  }
}

:host([variant='flat']) {
  display: inline-block;
}

// adjust alignment for slotted SVG icon
::slotted(svg) {
  vertical-align: middle;
}

// Note: without this, events on a disabled element will still fire
slot {
  pointer-events: none;
}

// Button styles
.auro-button {
  position: relative;
  cursor: pointer;
  padding: 0 var(--ds-size-300, vac.$ds-size-300);
  padding-inline: unset;
  padding-block: unset;
  box-sizing: content-box;
  overflow: hidden;
  text-overflow: ellipsis;
  user-select: none;
  white-space: nowrap;
  outline: none;

  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: var(--ds-size-100, vac.$ds-size-100);

  // removes margins around button in Safari
  margin: 0;

  // macOS / iOS agents
  -webkit-touch-callout: none;
  -webkit-user-select: none;

  transition: padding 300ms ease-out;

  &:focus,
  &:focus-visible {
    outline: none;
  }

  // handle active state
  &:active {
    transform: scale(0.95);
  }

  &.loading {
    cursor: not-allowed;

    *:not([auro-loader]) {
      visibility: hidden;
    }
  }

  @include bp.auro_grid-breakpoint--sm {
    width: auto;
  }

  &:disabled {
    cursor: not-allowed;
    transform: unset;
  }

  &[variant='secondary'] {
    &:disabled {
      cursor: not-allowed;
      transform: unset;
    }
  }

  &[variant='tertiary'] {
    &:disabled {
      cursor: not-allowed;
      transform: unset;
    }
  }

  &[variant='ghost'] {
    &:disabled {
      cursor: not-allowed;
      transform: unset;
    }
  }

  &[onDark] {
    &:disabled {
      cursor: not-allowed;
      transform: unset;
    }

    &[variant='secondary'] {
      &:disabled {
        cursor: not-allowed;
        transform: unset;
      }
    }

    &[variant='tertiary'] {
      @media (hover: hover) {
        &:active,
        &:hover {
          box-shadow: none;
        }
      }

      &:active {
        box-shadow: none;
      }

      &:disabled {
        cursor: not-allowed;
        transform: unset;
      }
    }
  }

  &:not(.inset){
    overflow: unset;

    ::slotted(:not(auro-icon):not([auro-icon])) {
      display: none;
    }
  }

  // auro-button--slim
  &--slim {
    min-width: unset;
    min-height: calc(var(--ds-size-500, vac.$ds-size-500) - var(--ds-size-50, vac.$ds-size-50));
    max-height: calc(var(--ds-size-500, vac.$ds-size-500) - var(--ds-size-50, vac.$ds-size-50));
  }

  // auro-button--iconOnly
  &--iconOnly {
    ::slotted(auro-icon),
    ::slotted([auro-icon]) {
      --ds-auro-icon-size: var(--ds-size-300, #{vac.$ds-size-300});
    }

    padding: 0 var(--ds-size-100, vac.$ds-size-100);

    border-radius: 100px;
    min-width: unset;

    height: var(--ds-size-600, vac.$ds-size-600);
    width: var(--ds-size-500, vac.$ds-size-500);
  }

  // auro-button--iconOnlySlim
  &--iconOnlySlim {
    ::slotted(auro-icon),
    ::slotted([auro-icon]) {
      --ds-auro-icon-size: calc(var(--ds-size-200, #{vac.$ds-size-200}) + var(--ds-size-50, #{vac.$ds-size-50}));
    }

    padding: 0 var(--ds-size-50, vac.$ds-size-50);

    height: calc(var(--ds-size-400, vac.$ds-size-400) + var(--ds-size-50, vac.$ds-size-50));
    width: calc(var(--ds-size-300, vac.$ds-size-300) + var(--ds-size-50, vac.$ds-size-50));
  }

  // auro-button--rounded
  &--rounded {
    border-radius: 100px;
    box-shadow: var(--ds-elevation-300, vac.$ds-elevation-300);

    height: var(--ds-size-500, vac.$ds-size-500);
    min-width: unset;

    transition: padding 300ms ease-out, outline 0ms, outline-offset 0ms;

    ::slotted(auro-icon),
    ::slotted([auro-icon]) {
      --ds-auro-icon-size: var(--ds-size-300, #{vac.$ds-size-300});
    }
  }
}

:host([rounded]) {
  .textSlot {
    transition: opacity 300ms ease-in;
    opacity: 1;
  }
}

:host([rounded][iconOnly]) {
  .textSlot {
    opacity: 0;
  }

  .textWrapper {
    display: none;
  }

  .auro-button {
    min-width: unset;
    padding: unset;

    width: var(--ds-size-600, vac.$ds-size-600);
  }
}

[auro-loader] {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  pointer-events: none;
}
