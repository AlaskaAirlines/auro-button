/* stylelint-disable */
@use '@aurodesignsystem/design-tokens/dist/legacy/auro-classic/SCSSVariables' as vac;

// SIZES/VALUES
$defaultBorderSize: 2px;

// MAPS

// The size names and their corresponding values
$sizeMap: ( xl: 72px, lg: 56px, md: 48px, sm: 36px, xs: 24px );

// LISTS
// To add a size or shape, simply add it to the respective list
// Oblong shapes are those that are not icon-only
// Symmetrical shapes are those that have equal width and height (icon-only)
$oblongShapes: (rounded, pill, pill-left, pill-right);
$symmetricalShapes: (circle, square);

// FUNCTIONS

// Gets the calculated size based on the provided size and border size
@function getCalculatedSize($size, $borderSize) {
  @return calc(#{$size} - (2 * #{$borderSize}));
}

// MIXINS
@mixin simple($size) {
  $simpleBorderSize: 0px;

  &.simple {
    border-width: $simpleBorderSize;
    min-height: getCalculatedSize($size, $simpleBorderSize);
    max-height: getCalculatedSize($size, $simpleBorderSize);
    background-color: unset;
    box-shadow: none; // only here to support classic shape temporarily
  }
}

@mixin thin($size) {
  $thinBorderSize: 1px;

  &.thin {
    border-width: $thinBorderSize;
    min-height: getCalculatedSize($size, $thinBorderSize);
    max-height: getCalculatedSize($size, $thinBorderSize);
    background-color: unset;
  }
}

@mixin parentBorder($size) {
  &.parentBorder {
    border: 0;
    box-shadow: unset;
    min-height: getCalculatedSize($size, 2px);
    max-height: getCalculatedSize($size, 2px);
  }
}

@mixin variants($size) {
  @include simple($size);
  @include thin($size);
  @include parentBorder($size);
}

// Mixin to generate shape/size styles dynamically
@mixin shape-styles($shape, $size, $symmetrical: false) {
  
  // Get the actual size value from the map using the size name
  $sizeValue: map-get($sizeMap, $size);
  
  // Determine the size based on the size parameter
  $calcSize: getCalculatedSize($sizeValue, $defaultBorderSize);

  .shape-#{$shape}-#{$size} {
    // Common styles for all shapes
    min-height: $calcSize;
    max-height: $calcSize;
    border-style: solid;
    overflow: hidden;

    // Variants
    @include variants($sizeValue);

    // Symmetrical shapes
    @if ($symmetrical == true) {
      min-width: $calcSize;
      max-width: $calcSize;
      padding: 0;
    }

    // Shape-specific styles
    // Left pill
    @if ($shape == pill-left) {
      border-radius: calc($sizeValue / 2) 0 0 calc($sizeValue / 2);
    } 

    // Right pill
    @if ($shape == pill-right) {
      border-radius: 0 calc($sizeValue / 2) calc($sizeValue / 2) 0;
    } 

    // Full pill
    @if ($shape == pill) {
      border-radius: calc($sizeValue / 2);
    } 

    // Rounded
    @if ($shape == rounded) {
      border-radius: 6px;
      
      // Special case for XS size
      @if ($size == xs) {
        border-radius: 4px;
      }
    } 

    // Circle
    @if ($shape == circle) {
      border-radius: 50%;
    }

    // Square
    @if ($shape == square) {
      border-radius: 6px;
    }
    
    // Add special handling for XS size
    @if ($size == xs) {
      outline-offset: -2px;
      outline-width: 1px;
    }
  }
}

// Generate styles for each shape and size combination
@each $size, $sizeValue in $sizeMap {
  @each $shape in $oblongShapes {
    @include shape-styles($shape, $size);
  }

  @each $shape in $symmetricalShapes {
    @include shape-styles($shape, $size, true);
  }
}