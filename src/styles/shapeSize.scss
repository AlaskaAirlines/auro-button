/* stylelint-disable */
@use "sass:map";
@use '@aurodesignsystem/design-tokens/dist/legacy/auro-classic/SCSSVariables' as vac;

/**
 * @file shapeSize.scss
 * @description Configurable system for managing button shapes and sizes in the Auro Design System.
 * 
 * This file provides a flexible and extensible way to define button shapes, sizes, and their variants.
 * The implementation is designed to be easily extended by simply modifying the configuration maps.
 * In most cases, you only need to edit the maps and not the implementation logic.
 * 
 * @configuration Maps:
 * - $sizeMap: Defines the available sizes (xs, sm, md, lg, xl) with their respective pixel values.
 *   - To add a new size, simply add a new key-value pair to this map.
 *   - For symmetrical shapes, the width and height will be set to this value.
 * 
 * - $borderSizeMap: Specifies the different border widths used for button variants.
 *   - Currently supports: default (2px), thin (1px), and simple (0px).
 * 
 * - $shapeConfig: Defines the button shapes and their properties.
 *   - For each shape, you can specify:
 *     - type: Either 'symmetrical' (equal width and height) or 'oblong' (width based on content)
 *     - borderRadius: Static border radius values with optional size-specific overrides
 *     - borderRadiusFunc: Dynamic function for calculating border radius based on button size
 * 
 * @extension
 * To add a new shape:
 * 1. Add a new entry to the $shapeConfig map
 * 2. Specify its type (symmetrical or oblong)
 * 3. Define either:
 *    - A borderRadius map with default and optional size-specific values, or
 *    - A borderRadiusFunc that dynamically calculates the radius based on size
 * 
 * To add a new size:
 * 1. Add a new entry to the $sizeMap with the desired height value
 * 2. Optionally add size-specific border radius values to shapes if needed
 * 
 * To add a new border variant:
 * 1. Add a new entry to the $borderSizeMap
 * 2. Create a new mixin similar to @mixin simple() or @mixin thin()
 * 3. Include the new mixin in the @mixin variants()
 * 
 * @implementation
 * The implementation automatically generates CSS classes for all combinations
 * of shapes and sizes, applying the appropriate styles based on the configuration.
 * The generated classes follow the pattern: .shape-{shapeName}-{sizeName}
 */

// Default border size for calculations
$defaultBorderSize: 2px;

// Size configuration map
// Each shape in the shape configuration will be generated for each of these sizes
$sizeMap: ( xl: 72px, lg: 56px, md: 48px, sm: 36px, xs: 24px );

// Border sizes map
// This map defines the different border widths used for button variants
$borderSizeMap: ( default: $defaultBorderSize, thin: 1px, simple: 0px );

// Define border radius calculation functions to be used in the shape configuration below
// This is required because SASS does not support inline functions in maps, but does allow function references
// If you are adding a new shape that requires a custom border radius calculation, define the function here and include it in the shapeConfig map
@function pillRadius($sizeValue) { @return ($sizeValue / 2) };
@function pillLeftRadius($sizeValue) { @return ($sizeValue / 2) 0 0 ($sizeValue / 2); };
@function pillRightRadius($sizeValue) { @return 0 ($sizeValue / 2) ($sizeValue / 2) 0; };

/**
 * Shape Configuration Map
 * 
 * Each shape entry in the map contains the following properties:
 * 
 * @property {string} type - Defines button shape behavior
 *   - 'symmetrical': Equal width and height (e.g., circle, square)
 *     - For symmetrical shapes, we do not include the left and right padding
 *   - 'oblong': Width determined by content (e.g., pill, rounded)
 *     - For oblong shapes, we also add left and right padding to ensure proper spacing
 * 
 * @property {Object} borderRadius - Static border radius values with size variants
 *   - Contains t-shirt sizes (xs, sm, md, lg, xl) with specific values
 *   - Falls back to 'default' if no specific size is found
 * 
 * @property {Function} borderRadiusFunc - Function for dynamic border radius calculation
 *   - When defined, this takes precedence over the static borderRadius map
 *   - Accepts the size value as a parameter and returns the calculated radius
 */
$shapeConfig: (
  rounded: (
    type: oblong,
    borderRadius: (
      default: 6px, 
      xs: 4px,
    )
  ),
  pill: (
    type: oblong,
    borderRadiusFunc: pillRadius
  ),
  pill-left: (
    type: oblong,
    borderRadiusFunc: pillLeftRadius
  ),
  pill-right: (
    type: oblong,
    borderRadiusFunc: pillRightRadius
  ),
  circle: (
    type: symmetrical,
    borderRadius: (
      default: 50%
    )
  ),
  square: (
    type: symmetrical,
    borderRadius: (
      default: 6px
    )
  )
);

// FUNCTIONS

// Gets the calculated size based on the provided size and border size
@function getCalculatedSize($size, $borderSize) {
  @return calc(#{$size} - (2 * #{$borderSize}));
}

// Get border radius based on shape and size with proper fallback pattern
@function getBorderRadius($shape, $size) {
  $sizeValue: map.get($sizeMap, $size);
  $shapeData: map.get($shapeConfig, $shape);
  
  // Check if this shape uses a function for calculating border radius
  @if map.has-key($shapeData, borderRadiusFunc) {
    // Call the appropriate function
    $radiusFunc: map.get($shapeData, borderRadiusFunc);
    @return call($radiusFunc, $sizeValue);
  }
  // Otherwise use the borderRadius map with fallback pattern
  @else {
    $borderRadiusConfig: map.get($shapeData, borderRadius);
    
    // If it's a map, look for specific size or fall back to default
    @if type-of($borderRadiusConfig) == map {
      @if map.has-key($borderRadiusConfig, $size) {
        @return map.get($borderRadiusConfig, $size);
      } @else {
        @return map.get($borderRadiusConfig, default);
      }
    } 
    // Direct value
    @else {
      @return $borderRadiusConfig;
    }
  }
}

// MIXINS
@mixin simple($size) {
  $simpleBorderSize: map.get($borderSizeMap, simple);

  &.simple {
    border-width: $simpleBorderSize;
    min-height: getCalculatedSize($size, $simpleBorderSize);
    max-height: getCalculatedSize($size, $simpleBorderSize);
    background-color: unset;
    box-shadow: none; // only here to support classic shape temporarily
  }
}

@mixin thin($size) {
  $thinBorderSize: map.get($borderSizeMap, thin);

  &.thin {
    border-width: $thinBorderSize;
    min-height: getCalculatedSize($size, $thinBorderSize);
    max-height: getCalculatedSize($size, $thinBorderSize);
    background-color: unset;
  }
}

@mixin parentBorder($size) {
  &.parentBorder {
    border: 0;
    box-shadow: unset;
    min-height: getCalculatedSize($size, map.get($borderSizeMap, default));
    max-height: getCalculatedSize($size, map.get($borderSizeMap, default));
  }
}

@mixin variants($size) {
  @include simple($size);
  @include thin($size);
  @include parentBorder($size);
}

@mixin symmetrical-shape($size) {
  min-width: $size;
  max-width: $size;
  padding: 0;
}

// Shape styling mixin with improved map usage
@mixin shape-styles($shape, $size) {
  // Get the actual size value from the map using the size name
  $sizeValue: map.get($sizeMap, $size);
  $shapeData: map.get($shapeConfig, $shape);
  $shapeType: map.get($shapeData, type);
  
  // Determine the size based on the size parameter
  $calcSize: getCalculatedSize($sizeValue, $defaultBorderSize);

  .shape-#{$shape}-#{$size} {
    // Common styles for all shapes
    min-height: $calcSize;
    max-height: $calcSize;
    border-style: solid;
    overflow: hidden;
    border-radius: getBorderRadius($shape, $size);

    // Variants
    @include variants($sizeValue);

    // Apply symmetrical styles if needed
    @if ($shapeType == symmetrical) {
      @include symmetrical-shape($sizeValue);
    }
  }
}

// Simplified loop structure
@each $size, $sizeValue in $sizeMap {
  @each $shape, $shapeData in $shapeConfig {
    @include shape-styles($shape, $size);
  }
}