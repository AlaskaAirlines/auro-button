// Copyright (c) Alaska Air. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.

// ---------------------------------------------------------------------

/* stylelint-disable 
   at-rule-no-unknown,
   comment-empty-line-before,
   scss/dollar-variable-colon-space-after,
   scss/dollar-variable-empty-line-before,
   scss/dollar-variable-first-in-block,
   scss/dollar-variable-pattern,
   color-function-notation,
   scss/selector-nest-combinators,
   selector-class-pattern,
   selector-attribute-quotes,
   no-descending-specificity,
   max-nesting-depth,
   declaration-empty-line-before,
   property-no-vendor-prefix,
   selector-max-class,
   no-duplicate-selectors */

// Import Auro Sass variables
@import "./../node_modules/@aurodesignsystem/design-tokens/dist/tokens/SCSSVariables";

// general WCSS imports
@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/breakpoints";
@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/core";
@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/animation";

@import "./../node_modules/@aurodesignsystem/design-tokens/dist/tokens/SCSSVariableMap";

$auro-inset-spacing-options: lg;
$auro-inset-directions:'--squish';

// TO-DO
// Sass and CSS variables do not process together
// These values should be moved to Auro Design Tokens for use
$auro-rgb-color-base-black-03: rgba(0, 0, 0, .03);
$auro-rgb-color-base-white-03: rgba(255, 255, 255, .03);

@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/utilityMixins/insetUtility";

// focus-visible mixin
@mixin focus-visible {
  outline: 3px solid transparent;
  box-shadow: inset 0 0 0 1px var(--ds-color-base-white, $ds-color-base-white), inset 0 0 0 3px var(--ds-color-background-lightest, $ds-color-background-lightest);

  // auro-button--secondary
  &[variant='secondary'],
  &--secondary {
    background-color: var(--ds-color-background-lighter, $ds-color-background-lighter);
    box-shadow: inset 0 0 0 3px var(--ds-color-ui-default-default, $ds-color-ui-default-default);
  }

  // auro-button--tertiary
  &[variant='tertiary'],
  &--tertiary {
    background-color: var(--ds-color-background-lighter, $ds-color-background-lighter);
    border-color: var(--ds-color-ui-default-default, $ds-color-ui-default-default);
    box-shadow: inset 0 0 0 3px var(--ds-color-ui-default-default, $ds-color-ui-default-default);
  }

  // auro-buttonOndark
  &Ondark {
    background-color: var(--ds-color-ui-default-inverse, $ds-color-ui-default-inverse);
    box-shadow: inset 0 0 0 3px var(--ds-color-base-white, $ds-color-base-white);

    // auro-buttonOndark--secondary
    &[variant='secondary'],
    &--secondary {
      background-color: var(--ds-color-base-black-opacity-15, $ds-color-base-black-opacity-15);
      box-shadow: inset 0 0 0 3px var(--ds-color-ui-active-inverse, $ds-color-ui-active-inverse);
      border: 1px solid var(--ds-color-ui-active-inverse, $ds-color-ui-active-inverse);
    }

    // auro-buttonOndark--tertiary
    &[variant='tertiary'],
    &--tertiary {
      background-color: var(--ds-color-base-black-opacity-15, $ds-color-base-black-opacity-15);
      border-color: var(--ds-color-ui-active-inverse, $ds-color-ui-active-inverse);
      box-shadow: inset 0 0 0 3px var(--ds-color-ui-active-inverse, $ds-color-ui-active-inverse);
    }
  }
}

:focus-visible.auro-button {
  @include focus-visible;
}

:host([fluid]),
:host([fluid=true]) {
  .auro-button {
    min-width: auto;
    width: 100%;
  }
}

// adjust alignment for slotted SVG icon
::slotted(svg) {
  vertical-align: middle;
}

// Note: without this, events on a disabled element will still fire
slot {
  pointer-events: none;
}

// Button styles
.auro-button {
  @include auro_transition(all, 0.15s, ease);
  $disabledOPacity: .4;

  position: relative;

  padding: 0 var(--ds-size-300, $ds-size-300);

  color: var(--ds-color-text-primary-inverse, $ds-color-text-primary-inverse);
  cursor: pointer;
  background-color: var(--ds-color-ui-default-default, $ds-color-ui-default-default);
  border: 1px solid var(--ds-color-ui-default-default, $ds-color-ui-default-default);
  border-radius: var(--ds-border-radius, $ds-border-radius);
  font-family: var(--ds-font-family-default, $ds-font-family-default);
  font-size: var(--ds-text-body-size-default, $ds-text-body-size-default);
  font-weight: var(--ds-text-body-default-weight, $ds-text-body-default-weight);
  overflow: hidden;
  text-overflow: ellipsis;
  user-select: none;
  white-space: nowrap;

  min-height: var(--ds-size-600, $ds-size-600);
  max-height: var(--ds-size-600, $ds-size-600);

  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: var(--ds-size-100, $ds-size-100);

  // removes margins around button in Safari
  margin: 0;

  // macOS / iOS agents
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
  -webkit-user-select: none;

  // handle hover state auro-button
  @media (hover: hover) {
    &:active,
    &:hover {
      background-image: linear-gradient(var(--ds-color-ui-hover-default, $ds-color-ui-hover-default), var(--ds-color-ui-hover-default, $ds-color-ui-hover-default));
      border: 1px solid var(--ds-color-ui-hover-default, $ds-color-ui-hover-default);
    }
  }

  // handle active state
  &:active {
    background-color: var(--ds-color-ui-active-default, $ds-color-ui-active-default);
    border: 1px solid var(--ds-color-ui-active-default, $ds-color-ui-active-default);
    transform: scale(0.95);
  }

  &.loading {
    cursor: not-allowed;

    *:not(auro-loader) {
      visibility: hidden;
    }

    auro-loader {
      color: var(--ds-color-background-darkest, $ds-color-background-darkest, $ds-color-background-darkest);
    }

    &.auro-buttonOndark {
      auro-loader {
        color: var(--ds-color-text-primary-inverse, $ds-color-text-primary-inverse);
      }
    }
  }

  @include auro_breakpoint--sm {
    min-width: 8.75rem;
    width: auto;
  }

  &:disabled {
    cursor: not-allowed;
    transform: unset;

    background-color: rgba($ds-color-ui-default-default, $disabledOPacity);
    border: 1px solid rgba($ds-color-ui-default-default, 0);

    @media (hover: hover) {
      &:hover {
        background-color: rgba($ds-color-ui-default-default, $disabledOPacity);
        border: 1px solid rgba($ds-color-ui-default-default, 0);
      }
    }
  }

  // auro-button--secondary
  &[variant='secondary'],
  &--secondary {
    background-color: var(--ds-color-background-lightest, $ds-color-background-lightest);
    border: 1px solid var(--ds-color-ui-default-default, $ds-color-ui-default-default);
    color: var(--ds-color-text-link-default, $ds-color-text-link-default);

    @media (hover: hover) {
      &:active,
      &:hover {
        background-image: linear-gradient(var(--ds-color-ui-bkg-hover-default, $ds-color-ui-bkg-hover-default), var(--ds-color-ui-bkg-hover-default, $ds-color-ui-bkg-hover-default));
        border: 1px solid var(--ds-color-ui-default-default, $ds-color-ui-default-default);
      }
    }

    &:active {
      background-color: var(--ds-color-ui-bkg-hover-default, $ds-color-ui-bkg-hover-default);
      border: 1px solid var(--ds-color-ui-default-default, $ds-color-ui-default-default);
    }

    &:disabled {
      cursor: not-allowed;
      transform: unset;

      color: rgba($ds-color-text-link-default, $disabledOPacity);
      background-color: rgba($ds-color-background-lightest, $disabledOPacity);
      border: 1px solid rgba($ds-color-ui-default-default, $disabledOPacity);

      @media (hover: hover) {
        &:hover {
          color: rgba($ds-color-text-link-default, $disabledOPacity);
          background-color: rgba($ds-color-background-lightest, $disabledOPacity);
          border: 1px solid rgba($ds-color-ui-default-default, $disabledOPacity);
        }
      }
    }
  }

  // auro-button--tertiary
  &[variant='tertiary'],
  &--tertiary {
    background-color: $auro-rgb-color-base-black-03;
    border-color: transparent;
    color: var(--ds-color-text-link-default, $ds-color-text-link-default);

    @media (hover: hover) {
      &:active,
      &:hover {
        background-image: linear-gradient(var(--ds-color-ui-bkg-hover-default), var(--ds-color-ui-bkg-hover-default));
        border-color: transparent;
      }
    }

    &:active {
      background-color: var(--ds-color-ui-bkg-hover-default, $ds-color-ui-bkg-hover-default);
      border-color: transparent;
    }

    &:disabled {
      cursor: not-allowed;
      transform: unset;

      color: rgba($ds-color-text-link-default, $disabledOPacity);
      background-color: $auro-rgb-color-base-black-03;
      border: 1px solid transparent;

      @media (hover: hover) {
        &:hover {
          background-color: $auro-rgb-color-base-black-03;
          border: 1px solid transparent;
        }
      }
    }
  }

  &Ondark {
    background-color: var(--ds-color-ui-default-inverse, $ds-color-ui-default-inverse);
    border: 1px solid var(--ds-color-ui-default-inverse, $ds-color-ui-default-inverse);
    color: var(--ds-color-text-primary-default);

    // auro-buttonOndark hover
    @media (hover: hover) {
      &:active,
      &:hover {
        background-image: linear-gradient(var(--ds-color-ui-hover-inverse, $ds-color-ui-hover-inverse), var(--ds-color-ui-hover-inverse, $ds-color-ui-hover-inverse));
        border: 1px solid var(--ds-color-ui-hover-inverse, $ds-color-ui-hover-inverse);
      }
    }

    &:active {
      background-color: var(--ds-color-ui-active-inverse, $ds-color-ui-active-inverse);
      border: 1px solid var(--ds-color-ui-active-inverse, $ds-color-ui-active-inverse);
    }

    &:disabled {
      cursor: not-allowed;
      transform: unset;

      color: rgba($ds-color-text-primary-default, $disabledOPacity);
      background-color: rgba($ds-color-ui-default-inverse, $disabledOPacity);
      border: 1px solid rgba($ds-color-ui-default-inverse, $disabledOPacity);

      @media (hover: hover) {
        &:hover {
          color: rgba($ds-color-text-primary-default, $disabledOPacity);
          background-color: rgba($ds-color-ui-default-inverse, $disabledOPacity);
          border: 1px solid rgba($ds-color-ui-default-inverse, $disabledOPacity);
        }
      }
    }

    // auro-buttonOndark--secondary
    &[variant='secondary'],
    &--secondary {
      background-color: var(--ds-color-background-darker, $ds-color-background-darker);
      border: 1px solid var(--ds-color-ui-default-inverse, $ds-color-ui-default-inverse);
      color: var(--ds-color-ui-default-inverse, $ds-color-ui-default-inverse);

      @media (hover: hover) {
        &:active,
        &:hover {
          background-image: linear-gradient(var(--ds-color-background-darkest, $ds-color-background-darkest), var(--ds-color-background-darkest, $ds-color-background-darkest));
        }
      }

      &:active {
        background-color: var(--ds-color-base-black-opacity-15, $ds-color-base-black-opacity-15, $ds-color-base-black-opacity-15);
        border: 1px solid var(--ds-color-ui-hover-inverse, $ds-color-ui-hover-inverse);
      }

      &:disabled {
        @media (hover: hover) {
          &:hover {
            background-color: var(--ds-color-background-darker, $ds-color-background-darker);
            border: 1px solid var(--ds-color-ui-default-inverse, $ds-color-ui-default-inverse);
          }
        }
      }

      &:disabled {
        cursor: not-allowed;
        transform: unset;

        color: rgba($ds-color-ui-default-inverse, $disabledOPacity);
        background-color: var(--ds-color-background-darker, $ds-color-background-darker);
        border: 1px solid rgba($ds-color-ui-default-inverse, $disabledOPacity);

        @media (hover: hover) {
          &:hover {
            color: rgba($ds-color-ui-default-inverse, $disabledOPacity);
            background-color: var(--ds-color-background-darker, $ds-color-background-darker);
            border: 1px solid rgba($ds-color-ui-default-inverse, $disabledOPacity);
          }
        }
      }
    }

    // auro-button--tertiary
    &[variant='tertiary'],
    &--tertiary {
      background-color: $auro-rgb-color-base-white-03;
      border: 1px solid transparent;
      color: var(--ds-color-ui-default-inverse, $ds-color-ui-default-inverse);

      @media (hover: hover) {
        &:active,
        &:hover {
          background-image: linear-gradient(var(--ds-color-ui-bkg-hover-inverse, $ds-color-ui-bkg-hover-inverse), var(--ds-color-ui-bkg-hover-inverse, $ds-color-ui-bkg-hover-inverse));
          border: 1px solid transparent;
          box-shadow: none;
        }
      }

      &:active {
        background-color: var(--ds-color-base-black-opacity-15, $ds-color-base-black-opacity-15);
        border: 1px solid transparent;
        box-shadow: none;
      }

      &:disabled {
        cursor: not-allowed;
        transform: unset;
        background-color: $auro-rgb-color-base-white-03;
        border: transparent;
        color: rgba($ds-color-ui-default-inverse, $disabledOPacity);

        @media (hover: hover) {
          &:hover {
            background-color: $auro-rgb-color-base-white-03;
            color: rgba($ds-color-ui-default-inverse, $disabledOPacity);
            border: transparent;
          }
        }
      }
    }
  }

  // auro-button--slim
  &--slim {
    padding: var(--ds-size-100, $ds-size-100) var(--ds-size-200, $ds-size-200);
    font-size: var(--ds-text-body-size-sm, $ds-text-body-size-sm);
    min-width: unset;
    min-height: 2.25rem;
    max-height: 2.25rem;
  }

  &--iconOnly {
    ::slotted(auro-icon) {
      width: var(--ds-size-300, $ds-size-300);
      height: var(--ds-size-300, $ds-size-300);
    }

    padding-left: calc(var(--ds-size-100, $ds-size-100) - var(--ds-size-25, $ds-size-25));
    padding-right: calc(var(--ds-size-100, $ds-size-100) - var(--ds-size-25, $ds-size-25));

    border-radius: 100px;
    min-width: unset;
  }

  &--iconOnlySlim {
    ::slotted(auro-icon) {
      width: calc(var(--ds-size-300, $ds-size-300) - var(--ds-size-50, $ds-size-50));
      height: calc(var(--ds-size-300, $ds-size-300) - var(--ds-size-50, $ds-size-50));
    }

    padding-left: var(--ds-size-50, $ds-size-50);
    padding-right: var(--ds-size-50, $ds-size-50);
  }

  // auro-button--rounded
  &--rounded {
    border-radius: 100px;
    box-shadow: var(--ds-elevation-300, $ds-elevation-300);

    height: var(--ds-size-500, $ds-size-500);
    min-width: unset;

    transition: all 300ms ease-out;

    ::slotted(auro-icon) {
      width: var(--ds-size-300, $ds-size-300);
      height: var(--ds-size-300, $ds-size-300);
    }
  }
}


:host([rounded]) {
  .textSlot {
    transition: opacity 300ms ease-in;
    opacity: 1;
  }
}

:host([rounded][iconOnly]) {
  .textSlot {
    opacity: 0;
  }

  .textWrapper {
    display: none;
  }

  .auro-button {
    min-width: unset;
    padding: unset;

    width: var(--ds-size-600, $ds-size-600);
  }
}

auro-loader {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  pointer-events: none;
}
